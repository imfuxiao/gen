package v1

import (
	"{{.ProjectName}}/app"
	"{{.ProjectName}}/model"
	"{{.ProjectName}}/services"
	"context"
	"github.com/kataras/iris"
	"go.mongodb.org/mongo-driver/mongo"
	"sync"
)

type {{.ModelName}}Controller interface {
	Find(app *app.App) func(c iris.Context)
	FindOne(app2 *app.App) func(c iris.Context)
	Create(app *app.App) func(c iris.Context)
	Update(app *app.App) func(c iris.Context)
	Delete(app *app.App) func(c iris.Context)
}

type {{.ModelName|ScoreToSmallCamel}}Controller struct {
	{{.ModelName|ScoreToSmallCamel}}Service services.{{.ModelName}}Service
	idGeneratorService    services.IdGeneratorService
}

// @Summary 分页查询
// @Description 分页查询
// @Accept json
// @Produce  json
// @Param id query string false "分页查询Page返回参数ID, 后台返回什么请求时携带此参数, 没有则为空字符串"
// @Param pageSize query integer false "每页显示数量, 默认20"
// @Param pageNumber query integer false "页码, 默认为1"
// @Param sortField query string false "排序字段"
// @Param isAsc query boolean false "是否升序: 默认 true"
// @Param applicationId query integer false "应用ID"
// TODO 补充其他查询条件
// @Success 200 {object} model.Response{{.ModelName|ScoreToBigCamel}}Data
// TODO: Router /api/v1/application [GET]
func (controller *{{.ModelName|ScoreToSmallCamel}}Controller) Find(app *app.App) func(c iris.Context) {
	return func(c iris.Context) {
		requestData := model.NewSearch{{.ModelName}}Param(c.URLParams())
		responseData, err := controller.{{.ModelName|ScoreToSmallCamel}}Service.Find(context.Background(), &requestData)
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.Unauthorized, err.Error()))
		}
		_, _ = c.JSON(model.Success(responseData))
	}
}

// @Summary 查询单个对象
// @Description 查询单个对象
// @Produce  json
// TODO: 补充查询条件, 如: Param applicationId path integer true "应用ID"
// @Success 200 {object} model.{{.ModelName|ScoreToBigCamel}}
// TODO: Router /api/v1/application/{applicationId} [GET]
func (controller *{{.ModelName|ScoreToSmallCamel}}Controller) FindOne(app *app.App) func(c iris.Context) {
	return func(c iris.Context) {
		_, err := c.Params().GetInt64("xxId") // TODO: 修改自己的主键ID
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		{{.ModelName|ScoreToSmallCamel}}, err := controller.{{.ModelName|ScoreToSmallCamel}}Service.FindOne(context.Background(), &model.{{.ModelName}}{
			// TODO 自定义主键ID ApplicationId: applicationId,
		})
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.InternalError, err.Error()))
			return
		}
		_, _ = c.JSON(model.Success({{.ModelName|ScoreToSmallCamel}}))
	}
}

// @Summary 添加一个应用程序
// @Description 添加一个应用程序
// @Accept  json
// @Produce  json
// TODO: Param {{.ModelName|ScoreToSmallCamel}} body model.{{.ModelName|ScoreToBigCamel}} true "应用"
// @Success 200 {object} model.ResponseData "{"code":0,"msg":"OK","data":{"id":1}}"
// TODO: Router /api/v1/application [POST]
func (controller *{{.ModelName|ScoreToSmallCamel}}Controller) Create(app *app.App) func(c iris.Context) {
	return func(c iris.Context) {
		var json struct {
			// TODO ApplicationName        string `json:"applicationName" validate:"required"`
			// TODO ApplicationEnName      string `json:"applicationEnName" validate:"required"`
			// TODO ApplicationDescription string `json:"applicationDescription"`
			// TODO LesseeId               string `json:"lesseeId" validate:"required"`
		}
		err := c.ReadJSON(&json)
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		err = app.Validate.Struct(json)
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		ctx := context.Background()
		// TODO: 补充自己的collection值
		applicationId, err := controller.idGeneratorService.GetId(ctx, "sys_application")
		if err != nil {
			c.Values().Set(model.ErrorContextKey, err)
			return
		}
		_, err = controller.{{.ModelName|ScoreToSmallCamel}}Service.Create(ctx, &model.{{.ModelName}}{
			// TODO ApplicationId:          *applicationId,
			// TODO ApplicationName:        json.ApplicationName,
			// TODO ApplicationEnName:      json.ApplicationEnName,
			// TODO ApplicationDescription: json.ApplicationDescription,
			// TODO LesseeId:               json.LesseeId,
		})
		if err != nil {
			c.Values().Set(model.ErrorContextKey, err)
			return
		}
		_, _ = c.JSON(model.Success(map[string]interface{}{"id": applicationId}))

	}
}

// @Summary 修改一个应用程序
// @Description 修改一个应用程序
// @Accept  json
// @Produce  json
// @Param applicationId path integer true "应用ID"
// @Param {{.ModelName|ScoreToSmallCamel}} body model.{{.ModelName|ScoreToBigCamel}} true "应用"
// @Success 200 {object} model.ResponseData "{"code":0,"msg":"OK","data":{"id":1}}"
// TODO: @Router /api/v1/application/{applicationId} [PUT]
func (controller *{{.ModelName|ScoreToSmallCamel}}Controller) Update(app *app.App) func(c iris.Context) {
	return func(c iris.Context) {
		var requestData struct {
			// TODO ApplicationId          int64  `json:"applicationId" validate:"required"`
			// TODO ApplicationName        string `json:"applicationName" validate:"required"`
			// TODO ApplicationEnName      string `json:"applicationEnName" validate:"required"`
			// TODO ApplicationDescription string `json:"applicationDescription"`
		}
		err := c.ReadJSON(&requestData)
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		err = app.Validate.Struct(requestData)
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		err = controller.{{.ModelName|ScoreToSmallCamel}}Service.Update(context.Background(), &model.{{.ModelName}}{
			// TODO ApplicationId:          requestData.ApplicationId,
			// TODO ApplicationName:        requestData.ApplicationName,
			// TODO ApplicationEnName:      requestData.ApplicationEnName,
			// TODO ApplicationDescription: requestData.ApplicationDescription,
		})
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		_, _ = c.JSON(model.Success(map[string]interface{}{"id": ""})) // TODO: 自定义返回值
	}
}

// @Summary 删除一个应用
// @Description 删除一个应用
// @Accept  json
// @Produce  json
// @Param applicationId query integer false "应用ID"
// @Success 200 {object} model.ResponseData "{"code":0,"msg":"OK","data":{"id":1}}"
// TODO: Router /api/v1/application/{applicationId} [DELETE]
func (controller *{{.ModelName|ScoreToSmallCamel}}Controller) Delete(app *app.App) func(c iris.Context) {
	return func(c iris.Context) {
		// TODO 修改为自己的主键ID
		_, err := c.Params().GetInt64("applicationId")
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.ParamInputError, err.Error()))
			return
		}
		err = controller.{{.ModelName|ScoreToSmallCamel}}Service.DeleteOne(context.Background(), &model.{{.ModelName}}{
			// TODO 改为自己的主键ID 如ApplicationId: requestData.ApplicationId,
		})
		if err != nil {
			c.Values().Set(model.ErrorContextKey, model.Error(model.Unauthorized, err.Error()))
			return
		}
		_, _ = c.JSON(model.Success(map[string]interface{}{"id": requestData.ApplicationId}))
	}
}

var _{{.ModelName|ScoreToSmallCamel}}Controller *{{.ModelName|ScoreToSmallCamel}}Controller
var {{.ModelName|ScoreToSmallCamel}}ControllerOnce sync.Once

func New{{.ModelName}}Controller(database *mongo.Database) {{.ModelName}}Controller {
	{{.ModelName|ScoreToSmallCamel}}ControllerOnce.Do(func() {
		_{{.ModelName|ScoreToSmallCamel}}Controller = &{{.ModelName|ScoreToSmallCamel}}Controller{
			{{.ModelName|ScoreToSmallCamel}}Service: services.New{{.ModelName}}Service(database),
			idGeneratorService:    services.NewIdGeneratorService(database),
		}
	})
	return _{{.ModelName|ScoreToSmallCamel}}Controller
}
